import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    const { currentContent, query, contractTitle, contractDescription } = await request.json()

    if (!currentContent && !query) {
      return NextResponse.json(
        { error: 'Current content and query are required' },
        { status: 400 }
      )
    }

    const systemPrompt = `You are an expert legal contract editor. Your job is to help users edit and improve their contracts based on their specific requests. 

Guidelines:
- Maintain the legal integrity and structure of the contract
- Make changes that align with the user's request
- Preserve important legal clauses unless specifically asked to change them
- Ensure the contract remains professional and legally sound
- If the user's request could create legal issues, suggest safer alternatives
- Keep the same general format and structure unless asked to change it

Contract Title: ${contractTitle || 'Untitled Contract'}
Contract Description: ${contractDescription || 'No description provided'}
`

    const userPrompt = `Current contract content:
${currentContent || 'No content yet - please create a contract based on the request below.'}

User's editing request:
${query}

Please provide the edited contract content based on the user's request. Return only the contract text without any explanations or markdown formatting.`

    const completion = await openai.chat.completions.create({
      model: "gpt-4.1-nano",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0.3,
      max_tokens: 2000,
    })

    const editedContent = completion.choices[0]?.message?.content?.trim()

    if (!editedContent) {
      throw new Error('No content generated by AI')
    }

    return NextResponse.json({
      editedContent,
      usage: completion.usage
    })

  } catch (error) {
    console.error('AI contract editing error:', error)
    
    if (error instanceof Error) {
      return NextResponse.json(
        { error: `AI editing failed: ${error.message}` },
        { status: 500 }
      )
    }
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
} 